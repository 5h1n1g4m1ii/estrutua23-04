1----------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 1000

struct Pilha {
    char items[MAX];
    int topo;
};

void push(struct Pilha *p, char c) {
    if (p->topo == MAX - 1) {
        printf("A pilha esta cheia\n");
        return;
    }
    p->items[++p->topo] = c;
}

char pop(struct Pilha *p) {
    if (p->topo == -1) {
        printf("A pilha esta vazia\n");
        return '\0';
    }
    return p->items[p->topo--];
}

void imprimirInverso(char *texto) {
    struct Pilha p;
    p.topo = -1;
    for (int i = 0; texto[i] != '\0'; i++) {
        push(&p, texto[i]);
    }
    printf("Texto invertido: ");
    while (p.topo != -1) {
        printf("%c", pop(&p));
    }
    printf("\n");
}

int palindromo(char *texto) {
    struct Pilha p;
    p.topo = -1;
    int len = strlen(texto);
    for (int i = 0; i < len; i++) {
        char c = tolower(texto[i]);
        if (c >= 'a' && c <= 'z') {
            push(&p, c);
        }
    }
    for (int i = 0; i < len; i++) {
        char c = tolower(texto[i]);
        if (c >= 'a' && c <= 'z') {
            if (c != pop(&p)) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    char texto[MAX];
    printf("Digite um texto: ");
    fgets(texto, MAX, stdin);
    imprimirInverso(texto);
    if (palindromo(texto)) {
        printf("O texto e um palindromo\n");
    } else {
        printf("O texto nao e um palindromo\n");
    }
    return 0;
}


2----------------------------

#include <stdio.h>
#include <stdlib.h>

struct No {
    int valor;
    struct No *prox;
};

struct Pilha {
    struct No *topo;
};

void push(struct Pilha *p, int valor) {
    struct No *novo = (struct No*) malloc(sizeof(struct No));
    novo->valor = valor;
    novo->prox = p->topo;
    p->topo = novo;
}

int pop(struct Pilha *p) {
    if (p->topo == NULL) {
        printf("A pilha esta vazia\n");
        return -1;
    }
    int valor = p->topo->valor;
    struct No *temp = p->topo;
    p->topo = p->topo->prox;
    free(temp);
    return valor;
}

void remover(struct Pilha *p, int chave) {
    struct Pilha temp;
    temp.topo = NULL;
    while (p->topo != NULL) {
        int valor = pop(p);
        if (valor != chave) {
            push(&temp, valor);
        }
    }
    while (temp.topo != NULL) {
        push(p, pop(&temp));
    }
}

void imprimir(struct Pilha *p) {
    struct No *no = p->topo;
    printf("Pilha: ");
    while (no != NULL) {
        printf("%d ", no->valor);
        no = no->prox;
    }
    printf("\n");
}

int main() {
    struct Pilha p;
    p.topo = NULL;
    push(&p, 1);
    push(&p, 2);
    push(&p, 3);
    push(&p, 4);
    push(&p, 5);
    int chave;
    printf("Digite a chave a ser removida: ");
    scanf("%d", &chave);
    remover(&p, chave);
    imprimir(&p);
    return 0;
}


3----------------------------

#include <iostream>
#include <string>
#include <queue>
using namespace std;

struct Aviao {
    string nome;
    int numero;
};

void exibirMenu() {
    cout << "\nSelecione uma opcao: \n";
    cout << "1. Listar o numero de avioes aguardando na fila de decolagem\n";
    cout << "2. Autorizar a decolagem do primeiro aviao da fila\n";
    cout << "3. Adicionar um aviao a fila de espera\n";
    cout << "4. Listar todos os avioes na fila de espera\n";
    cout << "5. Listar as caracteristicas do primeiro aviao da fila\n";
    cout << "6. Sair\n";
}

int main() {
    queue<Aviao> fila;  
    int opcao;

    do {
        exibirMenu();
        cin >> opcao;
        switch (opcao) {
    case 1: { 
        cout << "Numero de avioes aguardando na fila de decolagem: " << fila.size() << endl;
        break;
    }
    case 2: {
        if (!fila.empty()) {
            Aviao aviao = fila.front();
            cout << "Aviao " << aviao.nome << " (numero " << aviao.numero << ") autorizado para decolagem.\n";
            fila.pop();
        } else {
            cout << "Nenhum aviao na fila de espera.\n";
        }
        break;
    }
    case 3: { 
        Aviao aviao;
        cout << "Informe o nome do aviao: ";
        cin >> aviao.nome;
        cout << "Informe o numero do aviao: ";
        cin >> aviao.numero;
        fila.push(aviao);
        cout << "Aviao " << aviao.nome << " (numero " << aviao.numero << ") adicionado a fila de espera.\n";
        break;
    }
    case 4: {
        if (!fila.empty()) {
            cout << "Avioes na fila de espera:\n";
            int i = 1;
            for (queue<Aviao> temp = fila; !temp.empty(); temp.pop()) {
                Aviao aviao = temp.front();
                cout << i << ". " << aviao.nome << " (numero " << aviao.numero << ")\n";
                i++;
            }
        } else {
            cout << "Nenhum aviao na fila de espera.\n";
        }
        break;
    }
    case 5: {
        if (!fila.empty()) {
            Aviao aviao = fila.front();
            cout << "Caracteristicas do primeiro aviao da fila:\n";
            cout << "Nome: " << aviao.nome << endl;
            cout << "Numero: " << aviao.numero << endl;
        } else {
            cout << "Nenhum aviao na fila de espera.\n";
        }
        break;
    }
    case 6: { 
        cout << "Programa encerrado.\n";
        break;
    }
    default: {
        cout << "Opcao invalida. Tente novamente.\n";
        break;
    }
}
}

4----------------------------

#include <stdio.h>
#include <stdlib.h>

#define MAX 100 

typedef struct {
    int dados[MAX];
    int inicio, fim;
} Fila;

void inicializar(Fila *f) {
    f->inicio = 0;
    f->fim = -1;
}

int vazia(Fila *f) {
    return (f->fim < f->inicio);
}

int cheia(Fila *f) {
    return (f->fim == MAX - 1);
}

void inserir(Fila *f, int valor) {
    if (cheia(f)) {
        printf("Fila cheia.\n");
        exit(1);
    }
    f->fim++;
    f->dados[f->fim] = valor;
}

int remover(Fila *f) {
    if (vazia(f)) {
        printf("Fila vazia.\n");
        exit(1);
    }
    int valor = f->dados[f->inicio];
    f->inicio++;
    return valor;
}

void inverterFila(Fila *f1, Fila *f2) {
    // Inicializa a nova fila F2
    inicializar(f2);

    // Remove todos os elementos de F1 e insere em F2
    while (!vazia(f1)) {
        int valor = remover(f1);
        inserir(f2, valor);
    }

    // Remove todos os elementos de F2 e insere de volta em F1
    while (!vazia(f2)) {
        int valor = remover(f2);
        inserir(f1, valor);
    }
}

int main() {
    Fila f1, f2;
    int i;

    // Inicializa a fila F1 com 100 números aleatórios
    inicializar(&f1);
    for (i = 0; i < MAX; i++) {
        inserir(&f1, rand() % 100);
    }

    // Imprime a fila F1 original
    printf("Fila original:\n");
    while (!vazia(&f1)) {
        printf("%d ", remover(&f1));
    }
    printf("\n");

    // Inverte a fila F1 e cria a nova fila F2
    inverterFila(&f1, &f2);

    // Imprime a fila F1 invertida
    printf("Fila invertida:\n");
    while (!vazia(&f1)) {
        printf("%d ", remover(&f1));
    }
    printf("\n");

    return 0;
}


5----------------------------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_FILA 1000 // Tamanho máximo da fila
#define MAX_PILHA 1000 // Tamanho máximo da pilha

typedef struct {
    int dados[MAX_FILA];
    int inicio, fim;
} Fila;

typedef struct {
    int dados[MAX_PILHA];
    int topo;
} Pilha;

void inicializarFila(Fila *f) {
    f->inicio = 0;
    f->fim = -1;
}

int vaziaFila(Fila *f) {
    return (f->fim < f->inicio);
}

int cheiaFila(Fila *f) {
    return (f->fim == MAX_FILA - 1);
}

void inserirFila(Fila *f, int valor) {
    if (cheiaFila(f)) {
        printf("Fila cheia.\n");
        exit(1);
    }
    f->fim++;
    f->dados[f->fim] = valor;
}

int removerFila(Fila *f) {
    if (vaziaFila(f)) {
        printf("Fila vazia.\n");
        exit(1);
    }
    int valor = f->dados[f->inicio];
    f->inicio++;
    return valor;
}

void inicializarPilha(Pilha *p) {
    p->topo = -1;
}

int vaziaPilha(Pilha *p) {
    return (p->topo == -1);
}

int cheiaPilha(Pilha *p) {
    return (p->topo == MAX_PILHA - 1);
}

void push(Pilha *p, int valor) {
    if (cheiaPilha(p)) {
        printf("Pilha cheia.\n");
        exit(1);
    }
    p->topo++;
    p->dados[p->topo] = valor;
}

int pop(Pilha *p) {
    if (vaziaPilha(p)) {
        printf("Pilha vazia.\n");
        exit(1);
    }
    int valor = p->dados[p->topo];
    p->topo--;
    return valor;
}

void sorteio(Fila *f, Pilha *p) {
    int i, valor;
    int numeros[1000] = {0};

    // Gera 1000 números aleatórios
    srand(time(NULL));
    for (i = 0; i < 1000; i++) {
        valor = rand() % 1000;
        numeros[i] = valor;
    }

    // Insere os números na fila F ou na pilha P
    for (i = 0; i < 1000; i++) {
        valor = numeros[i];
        int j, encontrado = 0;
        for (j = 0; j < i; j++) {
            if (numeros[j] == valor) {
                encontrado = 1;
                break;
            }
        }
        if (encontrado) {
            push(p, valor);
        } else {
            inserirFila(f, valor);
        }
    }
}
int main() {
    Fila f;
    Pilha p;
    int i;

    // Inicializa a fila e a pilha
    inicializarFila(&f);
    inicializarPilha(&p);

    // Sorteia os números aleatórios e insere na fila ou na pilha
    sorteio(&f, &p);

    // Imprime a fila e a pilha resultantes
    printf("Fila F:\n");
    while (!vaziaFila(&f)) {
        printf("%d ", removerFila(&f));
    }
    printf("\nPilha P:\n");
    while (!vaziaPilha(&p)) {
        printf("%d ", pop(&p));
    }
    printf("\n");

    return 0;
}

6----------------------------



7----------------------------



8----------------------------



