1----------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 1000

struct Pilha {
    char items[MAX];
    int topo;
};

void push(struct Pilha *p, char c) {
    if (p->topo == MAX - 1) {
        printf("A pilha esta cheia\n");
        return;
    }
    p->items[++p->topo] = c;
}

char pop(struct Pilha *p) {
    if (p->topo == -1) {
        printf("A pilha esta vazia\n");
        return '\0';
    }
    return p->items[p->topo--];
}

void imprimirInverso(char *texto) {
    struct Pilha p;
    p.topo = -1;
    for (int i = 0; texto[i] != '\0'; i++) {
        push(&p, texto[i]);
    }
    printf("Texto invertido: ");
    while (p.topo != -1) {
        printf("%c", pop(&p));
    }
    printf("\n");
}

int palindromo(char *texto) {
    struct Pilha p;
    p.topo = -1;
    int len = strlen(texto);
    for (int i = 0; i < len; i++) {
        char c = tolower(texto[i]);
        if (c >= 'a' && c <= 'z') {
            push(&p, c);
        }
    }
    for (int i = 0; i < len; i++) {
        char c = tolower(texto[i]);
        if (c >= 'a' && c <= 'z') {
            if (c != pop(&p)) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    char texto[MAX];
    printf("Digite um texto: ");
    fgets(texto, MAX, stdin);
    imprimirInverso(texto);
    if (palindromo(texto)) {
        printf("O texto e um palindromo\n");
    } else {
        printf("O texto nao e um palindromo\n");
    }
    return 0;
}


2----------------------------

#include <stdio.h>
#include <stdlib.h>

struct No {
    int valor;
    struct No *prox;
};

struct Pilha {
    struct No *topo;
};

void push(struct Pilha *p, int valor) {
    struct No *novo = (struct No*) malloc(sizeof(struct No));
    novo->valor = valor;
    novo->prox = p->topo;
    p->topo = novo;
}

int pop(struct Pilha *p) {
    if (p->topo == NULL) {
        printf("A pilha esta vazia\n");
        return -1;
    }
    int valor = p->topo->valor;
    struct No *temp = p->topo;
    p->topo = p->topo->prox;
    free(temp);
    return valor;
}

void remover(struct Pilha *p, int chave) {
    struct Pilha temp;
    temp.topo = NULL;
    while (p->topo != NULL) {
        int valor = pop(p);
        if (valor != chave) {
            push(&temp, valor);
        }
    }
    while (temp.topo != NULL) {
        push(p, pop(&temp));
    }
}

void imprimir(struct Pilha *p) {
    struct No *no = p->topo;
    printf("Pilha: ");
    while (no != NULL) {
        printf("%d ", no->valor);
        no = no->prox;
    }
    printf("\n");
}

int main() {
    struct Pilha p;
    p.topo = NULL;
    push(&p, 1);
    push(&p, 2);
    push(&p, 3);
    push(&p, 4);
    push(&p, 5);
    int chave;
    printf("Digite a chave a ser removida: ");
    scanf("%d", &chave);
    remover(&p, chave);
    imprimir(&p);
    return 0;
}


3----------------------------



4----------------------------



5----------------------------



6----------------------------



7----------------------------



8----------------------------



